buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
//
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = project.mod_version
group = 'galena.coopperative.modid'
archivesBaseName = 'Coopperative-'+project.mc_version

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: project.mc_version

    runs {
        client {
            workingDirectory project.file('run')

            arg "-mixin.config=coopperative.mixins.json"

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            mods {
                coopperative {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            arg "-mixin.config=coopperative.mixins.json"

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            mods {
                coopperative {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            //property 'forge.logging.console.level', 'debug'

            args '--mod', 'coopperative', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing', file('src/generated/resources/')

            environment 'target', 'fmluserdevdata'

            mods {
                coopperative {
                    source sourceSets.main
                }
            }
        }
    }
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    maven {
        url='https://repo.spongepowered.org/repository/maven-public/'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // For testing and showcasing with pretty shaders:
    //runtimeOnly fg.deobf("curse.maven:oculus-581495:3821406")
    //runtimeOnly fg.deobf("curse.maven:rubidium-574856:3749094")
}

mixin {
    add sourceSets.main, "coopperative.refmap.json"
    config 'coopperative.mixins.json'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "coopperative",
                "Specification-Vendor"    : "galena",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${project.mod_version}",
                "Implementation-Vendor"   : "galena",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "coopperative.mixins.json"
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
