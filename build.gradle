import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id "java"
    id "maven-publish"
    id "com.modrinth.minotaur" version "${minotaur_version}"
    id "net.darkhax.curseforgegradle" version "${cursegradle_version}"
    id "net.minecraftforge.gradle" version "${forgegradle_version}"
    id "org.spongepowered.mixin" version "${mixingradle_version}"
}

archivesBaseName = "${mod_name} ${minecraft_version}-"
def isCI = System.getenv("CI") == "true"

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "official", version: minecraft_version

    runs {
        client {
            workingDirectory project.file("run")
            taskName "Client"
            arg "-mixin.config=galenacapes.forge.mixins.json"
        }

        server {
            workingDirectory project.file("run/server")
            taskName "Server"
        }

        data {
            args "--mod", mod_id, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/"), "--existing-mod", "supplementaries", "--existing-mod", "quark"
            taskName "Data"
        }

        forEach {
            it.property("forge.logging.console.level", "debug")

            it.ideaModule("${project.name}.main")
            it.arg("-mixin.config=${mod_id}.mixins.json")

            it.mods {
                create(mod_id) {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir "src/generated/resources"

repositories {
    maven {
        url "https://maven.blamejared.com"
        content {
            includeGroup "vazkii.autoreglib"
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url "https://maven.architectury.dev/"
        content {
            includeGroup "dev.architectury"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

    // for config & dynamic data/resourcepack
    implementation fg.deobf("curse.maven:selene-499980:${moonlight_lib_version}")

    //implementation fg.deobf("curse.maven:quark-243121:${quark_version}")
    //implementation fg.deobf("vazkii.autoreglib:AutoRegLib:${arl_version}")
    //compileOnly fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
    implementation fg.deobf("curse.maven:supplementaries-412082:${supplementaries_version}")
    //implementation fg.deobf("curse.maven:oreganized-769203:${oreganized_version}")

    if (!isCI) {
        // Pretty Shaders for Showcases
        //runtimeOnly fg.deobf("curse.maven:oculus-581495:${oculus_version}")
        //runtimeOnly fg.deobf("curse.maven:rubidium-574856:${rubidium_version}")

        // For testing compatibility
        //runtimeOnly fg.deobf("curse.maven:create-328085:${create_version}")
        //runtimeOnly fg.deobf("curse.maven:flywheel-486392:${flywheel_version}")
        //runtimeOnly fg.deobf("curse.maven:create-alloyed-564792:${create_alloyed_version}")
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : mod_name,
                "Specification-Vendor"    : mod_author,
                "Specification-Version"   : project.jar.archiveVersion,
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Timestampe"              : System.currentTimeMillis(),
                "Built-On-Java"           : "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})",
                "Build-On-Minecraft"      : minecraft_version
        ])
    }
}

jar.finalizedBy("reobfJar")

// Disables Gradle"s custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

tasks.withType(ProcessResources) {
    // this will ensure that this task is redone when the versions change.
    inputs.property("version", project.version)

    filesMatching(["META-INF/mods.toml", "pack.mcmeta"]) {
        expand([
                "mod_version": project.version,
                "mod_id"     : project.mod_id,
                "mod_name"   : project.mod_name,
                "mod_author" : project.mod_author,
        ])
    }
}

tasks.register("curseforge", TaskPublishCurseForge) {
    apiToken = System.getenv("CURSEFORGE_TOKEN")

    def mainFile = upload(project.curseforge_project_id, jar)

    mainFile.changelogType = "markdown"
    mainFile.changelog = System.getenv("CHANGELOG")

    mainFile.addOptional "supplementaries"
    mainFile.addOptional "quark"
    mainFile.addOptional "oreganized"
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.modrinth_project_id
    versionType = project.release_type
    uploadFile = jar
    gameVersions = [project.minecraft_version]
    changelog = System.getenv("CHANGELOG")
    dependencies {
        optional.project "supplementaries"
        optional.project "quark"
        optional.project "oreganized"
    }
}